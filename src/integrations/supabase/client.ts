// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';

// Use environment variables instead of hardcoded values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('Missing Supabase environment variables. Check your .env file.');
  // Force an error to be displayed in the console with detailed information
  throw new Error(
    'Supabase configuration error: Missing environment variables. ' +
    'Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'
  );
}

// Create supabase client with improved configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce', // Use PKCE flow for better security
    storage: localStorage, // Explicitly set storage to localStorage
    debug: false, // Set to true to enable debug logs during development
    storageKey: 'discover-diani-auth-token', // Unique key to prevent conflicts
  },
  global: {
    // Connection error handling for the global client
    fetch: (url, options) => {
      return fetch(url, {
        ...options,
        // Add a timeout for fetch operations
        signal: AbortSignal.timeout(10000), // 10 second timeout
      });
    },
  },
});

// Export a custom function to check database health
export const checkSupabaseHealth = async () => {
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(0);
    if (error) {
      console.error('Database health check failed:', error);
      return false;
    }
    return true;
  } catch (err) {
    console.error('Failed to connect to Supabase:', err);
    return false;
  }
};
